{
	"info": {
		"_postman_id": "452e71dd-f8bd-4f4a-bca7-33de6c85fdd2",
		"name": "Backtester",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38822965",
		"_collection_link": "https://backtester.postman.co/workspace/Backtester-Workspace~923bb989-2337-4f98-b4a4-f6d5ad38150f/collection/37969865-452e71dd-f8bd-4f4a-bca7-33de6c85fdd2?action=share&source=collection_link&creator=38822965"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register - Create user account",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"testuser21@gmail.com\",\n    \"password\": \"12345678\",\n    \"username\": \"testuser123\",\n    \"first_name\": \"testuser first name\",\n    \"last_name\": \"test user last name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user_auth/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user_auth",
								"users",
								""
							]
						}
					},
					"response": [
						{
							"name": "201",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"testuser21@gmail.com\",\n    \"password\": \"12345678\",\n    \"username\": \"testuser123\",\n    \"first_name\": \"testuser first name\",\n    \"last_name\": \"test user last name\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/user_auth/users/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"user_auth",
										"users",
										""
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 06 Oct 2024 20:33:39 GMT"
								},
								{
									"key": "Server",
									"value": "WSGIServer/0.2 CPython/3.11.10"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Vary",
									"value": "Accept"
								},
								{
									"key": "Allow",
									"value": "POST, OPTIONS"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Length",
									"value": "159"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Referrer-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"User created\",\n    \"data\": {\n        \"username\": \"testuser123\",\n        \"email\": \"testuser21@gmail.com\",\n        \"first_name\": \"testuser first name\",\n        \"last_name\": \"test user last name\"\n    }\n}"
						}
					]
				},
				{
					"name": "Login - obtain tokens",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser123\",\n    \"password\": \"12345678\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user_auth/api/token/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user_auth",
								"api",
								"token",
								""
							]
						}
					},
					"response": [
						{
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"testuser123\",\n    \"password\": \"12345678\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/user_auth/api/token/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"user_auth",
										"api",
										"token",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 06 Oct 2024 20:34:22 GMT"
								},
								{
									"key": "Server",
									"value": "WSGIServer/0.2 CPython/3.11.10"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Vary",
									"value": "Accept"
								},
								{
									"key": "Allow",
									"value": "POST, OPTIONS"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Length",
									"value": "483"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Referrer-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								}
							],
							"cookie": [],
							"body": "{\n    \"refresh\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcyODY3ODg2MiwiaWF0IjoxNzI4MjQ2ODYyLCJqdGkiOiJjNDA5NGVhNGY3NjM0MDFiYjFiNDdhNzE4ZDQxNzQxNCIsInVzZXJfaWQiOjF9.GL4gzR2k_6bC5YAGfZE8RXz5jdoXzT5GLJLk6-DVqO8\",\n    \"access\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzI4MzMzMjYyLCJpYXQiOjE3MjgyNDY4NjIsImp0aSI6ImU1Y2ZmYTk3ZTU0ZDRiZmM5OTBhMTJjNzk5YTkyNjZhIiwidXNlcl9pZCI6MX0.ZPApryrj-aW_M3ZTKB0P-I5vcMtE5C74AF9E3Ab4Z5A\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Strategy",
			"item": [
				{
					"name": "Create strategy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"prompt\": \"Please create a simple algorithmic trading strategy for Bitcoin using technical indicators such as moving averages and RSI. The strategy should include entry and exit conditions.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/backtester/strategies/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"backtester",
								"strategies",
								""
							]
						}
					},
					"response": [
						{
							"name": "201",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"prompt\": \"Please create a simple algorithmic trading strategy for Bitcoin using technical indicators such as moving averages and RSI. The strategy should include entry and exit conditions.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/backtester/strategies/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"backtester",
										"strategies",
										""
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 06 Oct 2024 20:36:23 GMT"
								},
								{
									"key": "Server",
									"value": "WSGIServer/0.2 CPython/3.11.10"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Vary",
									"value": "Accept"
								},
								{
									"key": "Allow",
									"value": "GET, POST, HEAD, OPTIONS"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Length",
									"value": "1268"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Referrer-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Strategy created successfully!\",\n    \"prompt\": \"Please create a simple algorithmic trading strategy for Bitcoin using technical indicators such as moving averages and RSI. The strategy should include entry and exit conditions.\",\n    \"strategy_code\": \"import backtrader as bt\\n\\nclass MyStrategy(bt.Strategy):\\n    params = (\\n        ('sma_fast_period', 10),\\n        ('sma_slow_period', 50),\\n        ('rsi_period', 14),\\n        ('rsi_overbought', 70),\\n        ('rsi_oversold', 30),\\n    )\\n\\n    def __init__(self):\\n        self.sma_fast = bt.indicators.SMA(self.data.close, period=self.params.sma_fast_period)\\n        self.sma_slow = bt.indicators.SMA(self.data.close, period=self.params.sma_slow_period)\\n        self.rsi = bt.indicators.RSI(self.data.close, period=self.params.rsi_period)\\n\\n    def next(self):\\n        if not self.position:  # Not in the market\\n            if self.sma_fast[0] > self.sma_slow[0] and self.rsi[0] < self.params.rsi_oversold:\\n                self.buy()\\n        else:  # In the market\\n            if self.sma_fast[0] < self.sma_slow[0] or self.rsi[0] > self.params.rsi_overbought:\\n                self.close()\",\n    \"parameters\": {\n        \"sma_fast_period\": 10,\n        \"sma_slow_period\": 50,\n        \"rsi_period\": 14,\n        \"rsi_overbought\": 70,\n        \"rsi_oversold\": 30\n    }\n}"
						}
					]
				},
				{
					"name": "Modify strategy",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"prompt\": \"Please create a simple algorithmic trading strategy for Bitcoin using technical indicators such as moving averages and RSI. The strategy should include entry and exit condition\",\n    \"strategy_code\": \"import backtrader as bt\\n\\nclass MyStrategy(bt.Strategy):\\n    params = (\\n        ('sma_fast_period', 10),\\n        ('sma_slow_period', 50),\\n        ('rsi_period', 14),\\n        ('rsi_overbought', 70),\\n        ('rsi_oversold', 30),\\n    )\\n\\n    def __init__(self):\\n        self.sma_fast = bt.indicators.SMA(self.data.close, period=self.params.sma_fast_period)\\n        self.sma_slow = bt.indicators.SMA(self.data.close, period=self.params.sma_slow_period)\\n        self.rsi = bt.indicators.RSI(self.data.close, period=self.params.rsi_period)\\n\\n    def next(self):\\n        if not self.position:\\n            if self.sma_fast[-1] < self.sma_slow[-1] and self.sma_fast[0] > self.sma_slow[0] and self.rsi[0] < self.params.rsi_oversold:\\n                self.buy()\\n        else:\\n            if self.sma_fast[-1] > self.sma_slow[-1] and self.sma_fast[0] < self.sma_slow[0] and self.rsi[0] > self.params.rsi_overbought:\\n                self.close()\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/backtester/strategies/:id/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"backtester",
								"strategies",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "200",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"prompt\": \"Please create a simple algorithmic trading strategy for Bitcoin using technical indicators such as moving averages and RSI. The strategy should include entry and exit condition\",\n    \"strategy_code\": \"import backtrader as bt\\n\\nclass MyStrategy(bt.Strategy):\\n    params = (\\n        ('sma_fast_period', 10),\\n        ('sma_slow_period', 50),\\n        ('rsi_period', 14),\\n        ('rsi_overbought', 70),\\n        ('rsi_oversold', 30),\\n    )\\n\\n    def __init__(self):\\n        self.sma_fast = bt.indicators.SMA(self.data.close, period=self.params.sma_fast_period)\\n        self.sma_slow = bt.indicators.SMA(self.data.close, period=self.params.sma_slow_period)\\n        self.rsi = bt.indicators.RSI(self.data.close, period=self.params.rsi_period)\\n\\n    def next(self):\\n        if not self.position:\\n            if self.sma_fast[-1] < self.sma_slow[-1] and self.sma_fast[0] > self.sma_slow[0] and self.rsi[0] < self.params.rsi_oversold:\\n                self.buy()\\n        else:\\n            if self.sma_fast[-1] > self.sma_slow[-1] and self.sma_fast[0] < self.sma_slow[0] and self.rsi[0] > self.params.rsi_overbought:\\n                self.close()\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/backtester/strategies/:id/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"backtester",
										"strategies",
										":id",
										""
									],
									"variable": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 06 Oct 2024 20:37:21 GMT"
								},
								{
									"key": "Server",
									"value": "WSGIServer/0.2 CPython/3.11.10"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Vary",
									"value": "Accept"
								},
								{
									"key": "Allow",
									"value": "GET, PUT, PATCH, DELETE, HEAD, OPTIONS"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Length",
									"value": "1316"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Referrer-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Strategy modified successfully!\",\n    \"prompt\": \"Please create a simple algorithmic trading strategy for Bitcoin using technical indicators such as moving averages and RSI. The strategy should include entry and exit condition\",\n    \"strategy_code\": \"import backtrader as bt\\n\\nclass MyStrategy(bt.Strategy):\\n    params = (\\n        ('sma_fast_period', 10),\\n        ('sma_slow_period', 50),\\n        ('rsi_period', 14),\\n        ('rsi_overbought', 70),\\n        ('rsi_oversold', 30),\\n    )\\n\\n    def __init__(self):\\n        self.sma_fast = bt.indicators.SMA(self.data.close, period=self.params.sma_fast_period)\\n        self.sma_slow = bt.indicators.SMA(self.data.close, period=self.params.sma_slow_period)\\n        self.rsi = bt.indicators.RSI(self.data.close, period=self.params.rsi_period)\\n\\n    def next(self):\\n        if not self.position:\\n            if self.sma_fast[-1] < self.sma_slow[-1] and self.sma_fast[0] > self.sma_slow[0] and self.rsi[-1] < self.params.rsi_oversold:\\n                self.buy()\\n        else:\\n            if self.sma_fast[-1] > self.sma_slow[-1] and self.sma_fast[0] < self.sma_slow[0] and self.rsi[-1] > self.params.rsi_overbought:\\n                self.close()\",\n    \"parameters\": {\n        \"sma_fast_period\": 10,\n        \"sma_slow_period\": 50,\n        \"rsi_period\": 14,\n        \"rsi_overbought\": 70,\n        \"rsi_oversold\": 30\n    }\n}"
						}
					]
				},
				{
					"name": "Run backtest",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"strategy_code\": \"import backtrader as bt\\n\\nclass MyStrategy(bt.Strategy):\\n    params = (\\n        ('sma_fast_period', 10),\\n        ('sma_slow_period', 50),\\n        ('rsi_period', 14),\\n        ('rsi_overbought', 70),\\n        ('rsi_oversold', 30),\\n    )\\n\\n    def __init__(self):\\n        self.sma_fast = bt.indicators.SMA(self.data.close, period=self.params.sma_fast_period)\\n        self.sma_slow = bt.indicators.SMA(self.data.close, period=self.params.sma_slow_period)\\n        self.rsi = bt.indicators.RSI(self.data.close, period=self.params.rsi_period)\\n\\n    def next(self):\\n        if not self.position:  # Not in the market\\n            if self.sma_fast[0] > self.sma_slow[0] and self.rsi[0] < self.params.rsi_oversold:\\n                self.buy()\\n        else:  # In the market\\n            if self.sma_fast[0] < self.sma_slow[0] or self.rsi[0] > self.params.rsi_overbought:\\n                self.close()\",\n    \"parameters\": {\n        \"sma_fast_period\": 10,\n        \"sma_slow_period\": 50,\n        \"rsi_period\": 14,\n        \"rsi_overbought\": 70,\n        \"rsi_oversold\": 30\n    },\n    \"assets\": [\n        \"1INCH\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/backtester/backtest/run/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"backtester",
								"backtest",
								"run",
								""
							]
						}
					},
					"response": [
						{
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"strategy_code\": \"import backtrader as bt\\n\\nclass MyStrategy(bt.Strategy):\\n    params = (\\n        ('sma_fast_period', 10),\\n        ('sma_slow_period', 50),\\n        ('rsi_period', 14),\\n        ('rsi_overbought', 70),\\n        ('rsi_oversold', 30),\\n    )\\n\\n    def __init__(self):\\n        self.sma_fast = bt.indicators.SMA(self.data.close, period=self.params.sma_fast_period)\\n        self.sma_slow = bt.indicators.SMA(self.data.close, period=self.params.sma_slow_period)\\n        self.rsi = bt.indicators.RSI(self.data.close, period=self.params.rsi_period)\\n\\n    def next(self):\\n        if not self.position:  # Not in the market\\n            if self.sma_fast[0] > self.sma_slow[0] and self.rsi[0] < self.params.rsi_oversold:\\n                self.buy()\\n        else:  # In the market\\n            if self.sma_fast[0] < self.sma_slow[0] or self.rsi[0] > self.params.rsi_overbought:\\n                self.close()\",\n    \"parameters\": {\n        \"sma_fast_period\": 10,\n        \"sma_slow_period\": 50,\n        \"rsi_period\": 14,\n        \"rsi_overbought\": 70,\n        \"rsi_oversold\": 30\n    },\n    \"assets\": [\n        \"1INCH\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/backtester/backtest/run/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"backtester",
										"backtest",
										"run",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 06 Oct 2024 20:39:44 GMT"
								},
								{
									"key": "Server",
									"value": "WSGIServer/0.2 CPython/3.11.10"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Vary",
									"value": "Accept"
								},
								{
									"key": "Allow",
									"value": "POST, OPTIONS"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Length",
									"value": "962"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Referrer-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								}
							],
							"cookie": [],
							"body": "{\n    \"results\": {\n        \"individual_results\": [\n            {\n                \"final_portfolio_value\": 99999.98199999999,\n                \"sharpe_ratio\": null,\n                \"max_drawdown\": 0.00007799999765406289,\n                \"total_return\": -1.800000163273025e-7,\n                \"trade_analysis\": {\n                    \"total_trades\": 8,\n                    \"winning_trades\": 5,\n                    \"losing_trades\": 3,\n                    \"win_rate\": 62.5,\n                    \"avg_trade\": -0.002249999999999905,\n                    \"avg_win\": 0.014600000000000102,\n                    \"avg_loss\": -0.03033333333333325,\n                    \"largest_win\": 0.04400000000000004,\n                    \"largest_loss\": -0.04499999999999971,\n                    \"avg_trade_length\": 2,\n                    \"profit_factor\": 0.80219780219781\n                }\n            }\n        ],\n        \"average_metrics\": {\n            \"final_portfolio_value\": 99999.98199999999,\n            \"sharpe_ratio\": null,\n            \"max_drawdown\": 0.00007799999765406289,\n            \"total_return\": -1.800000163273025e-7,\n            \"trade_analysis\": {\n                \"total_trades\": 8,\n                \"winning_trades\": 5,\n                \"losing_trades\": 3,\n                \"win_rate\": 62.5,\n                \"avg_trade\": -0.002249999999999905,\n                \"avg_win\": 0.014600000000000102,\n                \"avg_loss\": -0.03033333333333325,\n                \"largest_win\": 0.04400000000000004,\n                \"largest_loss\": -0.04499999999999971,\n                \"avg_trade_length\": 2,\n                \"profit_factor\": 0.80219780219781\n            }\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "List Strategies",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/backtester/strategies/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"backtester",
								"strategies",
								""
							]
						}
					},
					"response": [
						{
							"name": "200",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_url}}/backtester/strategies/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"backtester",
										"strategies",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 06 Oct 2024 20:36:44 GMT"
								},
								{
									"key": "Server",
									"value": "WSGIServer/0.2 CPython/3.11.10"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Vary",
									"value": "Accept"
								},
								{
									"key": "Allow",
									"value": "GET, POST, HEAD, OPTIONS"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Length",
									"value": "1377"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Referrer-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"strategy_id\": 1,\n        \"prompt\": \"Please create a simple algorithmic trading strategy for Bitcoin using technical indicators such as moving averages and RSI. The strategy should include entry and exit conditions.\",\n        \"strategy_code\": \"import backtrader as bt\\n\\nclass MyStrategy(bt.Strategy):\\n    params = (\\n        ('sma_fast_period', 10),\\n        ('sma_slow_period', 50),\\n        ('rsi_period', 14),\\n        ('rsi_overbought', 70),\\n        ('rsi_oversold', 30),\\n    )\\n\\n    def __init__(self):\\n        self.sma_fast = bt.indicators.SMA(self.data.close, period=self.params.sma_fast_period)\\n        self.sma_slow = bt.indicators.SMA(self.data.close, period=self.params.sma_slow_period)\\n        self.rsi = bt.indicators.RSI(self.data.close, period=self.params.rsi_period)\\n\\n    def next(self):\\n        if not self.position:  # Not in the market\\n            if self.sma_fast[0] > self.sma_slow[0] and self.rsi[0] < self.params.rsi_oversold:\\n                self.buy()\\n        else:  # In the market\\n            if self.sma_fast[0] < self.sma_slow[0] or self.rsi[0] > self.params.rsi_overbought:\\n                self.close()\",\n        \"parameters\": {\n            \"rsi_period\": 14,\n            \"rsi_oversold\": 30,\n            \"rsi_overbought\": 70,\n            \"sma_fast_period\": 10,\n            \"sma_slow_period\": 50\n        },\n        \"user\": {\n            \"username\": \"testuser123\",\n            \"email\": \"testuser21@gmail.com\",\n            \"first_name\": \"testuser first name\",\n            \"last_name\": \"test user last name\"\n        }\n    }\n]"
						}
					]
				},
				{
					"name": "Delete strategy",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"prompt\": \"Please create a simple algorithmic trading strategy for Bitcoin using technical indicators such as moving averages and RSI. The strategy should include entry and exit condition\",\n    \"strategy_code\": \"import backtrader as bt\\n\\nclass MyStrategy(bt.Strategy):\\n    params = (\\n        ('sma_fast_period', 10),\\n        ('sma_slow_period', 50),\\n        ('rsi_period', 14),\\n        ('rsi_overbought', 70),\\n        ('rsi_oversold', 30),\\n    )\\n\\n    def __init__(self):\\n        self.sma_fast = bt.indicators.SMA(self.data.close, period=self.params.sma_fast_period)\\n        self.sma_slow = bt.indicators.SMA(self.data.close, period=self.params.sma_slow_period)\\n        self.rsi = bt.indicators.RSI(self.data.close, period=self.params.rsi_period)\\n\\n    def next(self):\\n        if not self.position:\\n            if self.sma_fast[-1] < self.sma_slow[-1] and self.sma_fast[0] > self.sma_slow[0] and self.rsi[0] < self.params.rsi_oversold:\\n                self.buy()\\n        else:\\n            if self.sma_fast[-1] > self.sma_slow[-1] and self.sma_fast[0] < self.sma_slow[0] and self.rsi[0] > self.params.rsi_overbought:\\n                self.close()\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/backtester/strategies/:id/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"backtester",
								"strategies",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "204",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"prompt\": \"Please create a simple algorithmic trading strategy for Bitcoin using technical indicators such as moving averages and RSI. The strategy should include entry and exit condition\",\n    \"strategy_code\": \"import backtrader as bt\\n\\nclass MyStrategy(bt.Strategy):\\n    params = (\\n        ('sma_fast_period', 10),\\n        ('sma_slow_period', 50),\\n        ('rsi_period', 14),\\n        ('rsi_overbought', 70),\\n        ('rsi_oversold', 30),\\n    )\\n\\n    def __init__(self):\\n        self.sma_fast = bt.indicators.SMA(self.data.close, period=self.params.sma_fast_period)\\n        self.sma_slow = bt.indicators.SMA(self.data.close, period=self.params.sma_slow_period)\\n        self.rsi = bt.indicators.RSI(self.data.close, period=self.params.rsi_period)\\n\\n    def next(self):\\n        if not self.position:\\n            if self.sma_fast[-1] < self.sma_slow[-1] and self.sma_fast[0] > self.sma_slow[0] and self.rsi[0] < self.params.rsi_oversold:\\n                self.buy()\\n        else:\\n            if self.sma_fast[-1] > self.sma_slow[-1] and self.sma_fast[0] < self.sma_slow[0] and self.rsi[0] > self.params.rsi_overbought:\\n                self.close()\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/backtester/strategies/:id/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"backtester",
										"strategies",
										":id",
										""
									],
									"variable": [
										{
											"key": "id",
											"value": "2"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 06 Oct 2024 20:39:00 GMT"
								},
								{
									"key": "Server",
									"value": "WSGIServer/0.2 CPython/3.11.10"
								},
								{
									"key": "Vary",
									"value": "Accept"
								},
								{
									"key": "Allow",
									"value": "GET, PUT, PATCH, DELETE, HEAD, OPTIONS"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Length",
									"value": "0"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Referrer-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzI4MzMzMjYyLCJpYXQiOjE3MjgyNDY4NjIsImp0aSI6ImU1Y2ZmYTk3ZTU0ZDRiZmM5OTBhMTJjNzk5YTkyNjZhIiwidXNlcl9pZCI6MX0.ZPApryrj-aW_M3ZTKB0P-I5vcMtE5C74AF9E3Ab4Z5A",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "token",
			"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcyODYzMjAxNywiaWF0IjoxNzI4MjAwMDE3LCJqdGkiOiI5ZTA5MTFjM2U4OTQ0ZWJjOTFiZGFhMTI2ZTY2MzFmNSIsInVzZXJfaWQiOjF9.M2hX3ryCQUx91Lw68FTYrzJQa7tcmD0QL2vizVGrZhE",
			"type": "string",
			"disabled": true
		}
	]
}